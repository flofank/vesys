package bank.local;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import bank.Account;
import bank.Bank;
import bank.InactiveException;
import bank.OverdrawException;


public class LocalBank implements Bank{
	private Map<String, Account> accounts = new HashMap<String, Accounts>();

	@Override
	public String createAccount(String owner) throws IOException {
		Account ac = new LocalAccount(owner);
		accounts.put(ac.getNumber(), ac);
		return ac.getNumber();
	}

	@Override
	public boolean closeAccount(String number) throws IOException {
		Account ac = accounts.get(number);
		if (ac.getBalance() == 0d) {
			((LocalAccount) ac).deactivate();
		}
		return !ac.isActive();
	}

	@Override
	public Set<String> getAccountNumbers() throws IOException {
		return accounts.keySet();
	}

	@Override
	public Account getAccount(String number) throws IOException {
		return accounts.get(number);
	}

	@Override
	public void transfer(Account a, Account b, double amount)
			throws IOException, IllegalArgumentException, OverdrawException,
			InactiveException {
		if (amount < 0) {
			throw new IllegalArgumentException("No negative amounts allowed");
		}
		a.withdraw(amount);
		b.deposit(amount);
	}

}
