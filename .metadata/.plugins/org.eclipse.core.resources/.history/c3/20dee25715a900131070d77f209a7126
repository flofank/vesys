package ch.fhnw.bank.client.servlet;

import java.io.IOException;
import java.util.Arrays;
import java.util.Set;
import java.util.TreeSet;

import ch.fhnw.bank.Account;
import ch.fhnw.bank.Bank;
import ch.fhnw.bank.InactiveException;
import ch.fhnw.bank.OverdrawException;
import ch.fhnw.bank.communication.TaskMessage;
import ch.fhnw.bank.communication.TaskMessage.Task;

public class ServletBank implements Bank {
	private ServletDriver driver;

	public ServletBank(ServletDriver driver) {
		this.driver = driver;
	}

	@Override
	public String createAccount(String owner) throws IOException {
		TaskMessage task = new TaskMessage(Task.CREATE_ACCOUNT, new String[] {owner});
		task = driver.invoke(task);
		return task.results[0];
	}

	@Override
	public boolean closeAccount(String number) throws IOException {
		TaskMessage task = new TaskMessage(Task.CLOSE_ACCOUNT, new String[] {number});
		task = driver.invoke(task);
		return task.bResult;
	}

	@Override
	public Set<String> getAccountNumbers() throws IOException {
		TaskMessage task = new TaskMessage(Task.GET_ACCOUNT_NUMBERS);
		return new TreeSet(Arrays.asList(driver.invoke(task).results));
	}

	@Override
	public Account getAccount(String number) throws IOException {
		return new ServletAccount(number, driver);
	}

	@Override
	public void transfer(Account a, Account b, double amount) {
		TaskMessage task = new TaskMessage(Task.TRANSFER);
		if (amount < 0) {
			throw new IllegalArgumentException("No negative amounts allowed");
		}
		a.withdraw(amount);
		b.deposit(amount);
	}

}
