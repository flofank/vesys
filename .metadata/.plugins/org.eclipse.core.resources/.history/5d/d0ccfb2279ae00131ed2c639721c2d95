package ch.fhnw.bank.client.soap;

import java.io.IOException;

import ch.fhnw.bank.Account;
import ch.fhnw.bank.InactiveException;
import ch.fhnw.bank.OverdrawException;
import ch.fhnw.bank.client.soap.jaxws.IOException_Exception;
import ch.fhnw.bank.client.soap.jaxws.SOAPBankService;
import ch.fhnw.bank.communication.DepositTask;
import ch.fhnw.bank.communication.GetBalanceTask;
import ch.fhnw.bank.communication.GetOwnerTask;
import ch.fhnw.bank.communication.IsActiveTask;
import ch.fhnw.bank.communication.WithdrawTask;

public class SOAPAccount implements Account {
	private String number;
	private SOAPBankService service;

	public SOAPAccount(String number, SOAPBankService service) throws IOException {
		this.number = number;
		this.service = service;
	}
	@Override
	public String getNumber() throws IOException {
		return number;
	}

	@Override
	public String getOwner() throws IOException {
		try {
			return service.getAccountOwner(number);
		} catch (IOException_Exception e) {
			throw new IOException(e);
		}
	}

	@Override
	public boolean isActive() throws IOException {
		try {
			return service.isAccountActive(number);
		} catch (IOException_Exception e) {
			throw new InactiveException(e);
		}
	}

	@Override
	public void deposit(double amount) throws IOException,
			IllegalArgumentException, InactiveException {
		DepositTask task = new DepositTask(number, amount);
		task = driver.invoke(task);
		if (task.hasException()) {
			if (task.getException() instanceof IllegalArgumentException) {
				throw (IllegalArgumentException) task.getException();
			} else  if (task.getException() instanceof InactiveException) {
				throw (InactiveException) task.getException();
			} else if (task.getException() instanceof IOException) {
				throw (IOException) task.getException();
			}
		}
		task.getResult();
	}

	@Override
	public void withdraw(double amount) throws IOException,
			IllegalArgumentException, OverdrawException, InactiveException {
		WithdrawTask task = new WithdrawTask(number, amount);
		task = driver.invoke(task);
		if (task.hasException()) {
			if (task.getException() instanceof IllegalArgumentException) {
				throw (IllegalArgumentException) task.getException();
			} else  if (task.getException() instanceof InactiveException) {
				throw (InactiveException) task.getException();
			} else if (task.getException() instanceof OverdrawException) {
				throw (OverdrawException) task.getException();
			} else if (task.getException() instanceof IOException) {
				throw (IOException) task.getException();
			}
		}
		task.getResult();
	}

	@Override
	public double getBalance() throws IOException {
		GetBalanceTask task = new GetBalanceTask(number);
		task = driver.invoke(task);
		if (task.hasException() && task.getException() instanceof IOException) {
			throw (IOException) task.getException();
		}
		return task.getResult();
	}
}
